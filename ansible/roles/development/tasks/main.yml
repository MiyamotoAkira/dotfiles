- name: Install basics for Distribution
  include_tasks: "{{ ansible_distribution }}_development_basics.yml"

- name : Install Mercurial
  become: yes
  package:
    name: mercurial
    state: present

- name: Install jq
  become: yes
  package:
    name: jq
    state: present

- name: Add deb elixir repo
  become: yes
  apt_repository:
    repo: deb http://binaries.erlang-solutions.com/debian buster Release
    state: present
  when: ansible_distribution == 'Linux Mint'

- name: Install Erlang
  become: yes
  package:
    name: esl-erlang
    state: present
  when: ansible_distribution == 'Linux Mint'

- name: Install Elixir
  become: yes
  package:
    name: elixir
    state: present

- name: Add deb dotnet repo
  become: yes
  apt:
    deb: https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
    state: present
  when: ansible_distribution == 'Linux Mint'

# - name: Enable Universe
#   become: yes
#   apt_repository:
#     repo: "{{ item }}"
#     state: present
#   loop:
#       - "deb http://archive.ubuntu.com/ubuntu/ bionic universe"
#       - "deb http://archive.ubuntu.com/ubuntu/ bionic-updates universe"
#       - "deb http://security.ubuntu.com/ubuntu/ bionic-security universe"
#   when: ansible_distribution == 'Linux Mint'

- name: Add yum dotnet repo
  become: yes
  yum_repository:
    name: microsoft-prod
    baseurl: https://packages.microsoft.com/fedora/31/prod/
    gpgkey: https://packages.microsoft.com/keys/microsoft.asc
    gpgcheck: yes
    enabled: yes
    description: The repo for dotnet
  when: ansible_distribution == 'Fedora'

- name: Install dotnet
  become: yes
  package:
    name: dotnet-sdk-3.1
    state: present

- name: Install lein for Clojure
  get_url:
    url: https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    dest: "{{ bin_directory.path }}/lein"
    mode: a+x

- name: Create folder for lein
  file:
    path: ~/.lein
    state: directory

- name: Symbolic link for profiles.clj
  file:
    src: "{{ role_path }}/files/profiles.clj"
    dest: ~/.lein/profiles.clj
    state: link

- name: Check if NVM is installed
  stat:
    path: ~/.nvm
  register: nvm_installation

- name: Install nvm
  include_tasks: nvm.yaml
  when: not nvm_installation.stat.exists

- name: Check if Rust is installed
  stat:
    path: /home/akira/.cargo/bin/cargo
  register: rust_installation

- name: Install Rust
  include_tasks: rust.yaml
  when: not rust_installation.stat.exists

- name: Check if Stack Haskell is present
  stat:
    path: /usr/local/bin/stack
  register: stack_installation

- name: Install Stack Haskell
  include_tasks: haskell.yaml
  when: not stack_installation.stat.exists

- name: Download rbenv
  git:
    repo: https://github.com/rbenv/rbenv.git
    dest: ~/.rbenv
  register: rbenv_directory

- name: Download ruby-build
  git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: ~/.rbenv/plugins/ruby-build

- name: Download rbenv-update
  git:
    repo: https://github.com/rkh/rbenv-update.git
    dest: ~/.rbenv/plugins/rbenv-update

- name: Download pyenv
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: ~/.pyenv
  register: pyenv_directory

- name: Download pyenv-virtualenv
  git:
    repo: https://github.com/pyenv/pyenv-virtualenv.git
    dest: ~/.pyenv/plugins/pyenv-virtualenv

- name: Download pyenv-virtualenvwrapper
  git:
    repo: https://github.com/pyenv/pyenv-virtualenvwrapper.git
    dest: ~/.pyenv/plugins/pyenv-virtualenvwrapper

- name: Install virtualenv
  become: yes
  pip:
    name: virtualenv

- name: Install virtualenvwrapper
  become: yes
  pip:
    name: virtualenvwrapper

- name: Download sdkman
  get_url:
    url: https://get.sdkman.io?rcupdate=false
    dest: "{{ tmp_directory.path }}/sdkman_install.sh"
    mode: a+x
  register: sdkman_install

- name: Install Sdkman
  command: "{{ sdkman_install.dest }}"
  args:
    creates: ~/.sdkman

- name: Remove sdkman installer
  file:
    path: "{{ sdkman_install.dest }}"
    state: absent

- name: Download exercism
  unarchive:
    src: https://github.com/exercism/cli/releases/download/v3.0.13/exercism-linux-64bit.tgz
    dest: "{{ bin_directory.path }}"
    remote_src: yes
    creates: "{{ bin_directory.path }}/exercism"
    mode: a+x

- name: Install php
  become: yes
  package:
    name: php
    state: present

- name: Install php-cli
  become: yes
  package:
    name: php-cli
    state: present

- name: Install php-bz2
  become: yes
  package:
    name: php-bz2
    state: present

- name: download composer
  tags:
    - composer
  get_url:
    url: https://getcomposer.org/download/1.10.1/composer.phar
    dest: "{{ bin_directory.path }}/composer"
    mode: a+x

- name: download phpbrew
  tags:
    - phpbrew
  get_url:
    url: https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar
    dest: "{{ bin_directory.path }}/phpbrew"
    mode: a+x
